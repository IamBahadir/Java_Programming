
Definition of the polymorphism ;

           Ability of the object to take on many forms

           When the polymorphism occurs;
           'in a relation'


           Reference type is pareNt class/interface, and object type is child class

           instance --> to check which object stored in the reference type.

Dynamic polymorphism:
                    Method overriding
                    One method with multiple implementations
Static polymorphism:
                    Multiple methods with same name
                    each method has one implementation ONLY


    Webdriver driver = new FirefoxDriver();
    driver.takeScreenShot();

    Animal animal = new Tiger(); Reference name is must meaningful (animal)

    Employee employee = new Developer();


What is the meaning of the casting:

        Converting one type to another


    Type of Casting

    1 Primitive Type casting : must happen between primitives

         -Implicit primitive type casting : casting smaller primitive type to large primitive type
          Byte - short - int - long - float - double

          char - boolean

         -Explicit primitive type casting : casting larger primitive type to smaller primitive type

    2 Reference Type casting : there must be inheritance

         -Upcasting:(Implicitly)

                    Casting the smaller reference type(sub type) to larger reference type (super type)

                Animal animal1 = new Dog(); // upcasting
                Cat cat = new Cat();

                Animal animal2 = cat; // upcasting
                ---------------------------
                Phone phone1 = new Iphone(); // upcasting

                Samsung samsung = new Samsung();

                Phone phone2 = samsung; // upcasting


         -Downcasting: (Explicitly)

                Animal animal = new Dog();

                Dog dog = (Dog) animal // downcasting

OOP : Object Oriented Programming

     Advantages :
                 improves re-usability
                 easy to maintain
                 less memory
                 less code
                 avoid duplication
                 Flexible

     1. Encapsulation - hiding the data by giving private access modifier

                        getter (read)
                        setter (write)

     2. Inheritance   - Building "Is A" relationship (What kind of relationship it has - parent (sup) / child(sup) )

                        child class  : inherits all the variable and methods ( that are visible )
                        parent class : does not inherit anything form the child class

                        object class : is the parent of all the class by default

     3. Abstraction   - hiding the implementation details

                        focus the essential

                        abstract method :  method without the body meant to be overridden

                        2 ways
                                Abstract class : not concrete --> No objects
                                                 meant to be parent

                                                 class can extend one abstract class

                                Interface      : Not a class, mean to e implemented
                                                 used for providing additional methods that classes need

                                                 100% Abstraction

                                                 public is the Only access modifier

                                                 class can implements as many as its need


                                                 static,abstract,default


     4. Polymorphism  - ability of the objects to take on many forms












