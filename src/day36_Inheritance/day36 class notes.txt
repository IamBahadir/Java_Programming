Java Day 36
Topic: Inheritance Intro

package name: day36_Inheritance


warmup tasks:

    1. Create a class named Student:

            private variables:
                    name, gender, grade, schoolName

            Encapsulate all the fields (at least encapsulate two fields manually)

                    requirement:
                        1. age should not be set less than 5 or greate than 90
                        2. gender should not be set to any character other than: 'M' and 'F'
                        3. grade should not be set to any characters other than: 'A', 'B', 'C', 'D', and 'F'

            Add a constructor that can set all the fields when the object is created

                    (requirements of fields in the above must be applied)


            Method:

                    study()
                    toString()

Encapsulation: (Hiding the data) (fields the instance variable) (by given private access modifiers)

            use getter / setter / to read and write the private data


            Getter ( Read Only ) only instance variables , public instance method
                                 return type must match with private instance variable
                                 doesn't need pass any parameters

            Setter ( Write Only ) only instance variables , public instance method
                                 return type is void
                                 need pass parameters

Inheritance Topic:

            Is a relation
            extend keyword
            super keyword & constructor
            Types of Inheritance
            Is a relation vs Has a relation
            Method Overriding



Task:
            Animal{

                    name, breed, gender, size, age, color

                    method :
                            eat(), drink(), move(), sleep(), toString(), ...

                     What benefit is going to give you = I do not have to declare the features one by one.
            }

            Dog extend Animal:

                    bark() - - this is the unique for Dog

            Cat extend Animal:

                    scratch() - - this is the unique for Cat

            Tiger extend Animal:

                    roar() - - this is the unique for Tiger


import vs extend :

        import : borrowing
        extend : owning